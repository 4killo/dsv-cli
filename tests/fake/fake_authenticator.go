// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"sync"
	"thy/auth"
	"thy/errors"
)

type FakeAuthenticator struct {
	GetTokenStub        func() (*auth.TokenResponse, *errors.ApiError)
	getTokenMutex       sync.RWMutex
	getTokenArgsForCall []struct {
	}
	getTokenReturns struct {
		result1 *auth.TokenResponse
		result2 *errors.ApiError
	}
	getTokenReturnsOnCall map[int]struct {
		result1 *auth.TokenResponse
		result2 *errors.ApiError
	}
	GetTokenCacheOverrideStub        func(string, bool) (*auth.TokenResponse, *errors.ApiError)
	getTokenCacheOverrideMutex       sync.RWMutex
	getTokenCacheOverrideArgsForCall []struct {
		arg1 string
		arg2 bool
	}
	getTokenCacheOverrideReturns struct {
		result1 *auth.TokenResponse
		result2 *errors.ApiError
	}
	getTokenCacheOverrideReturnsOnCall map[int]struct {
		result1 *auth.TokenResponse
		result2 *errors.ApiError
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAuthenticator) GetToken() (*auth.TokenResponse, *errors.ApiError) {
	fake.getTokenMutex.Lock()
	ret, specificReturn := fake.getTokenReturnsOnCall[len(fake.getTokenArgsForCall)]
	fake.getTokenArgsForCall = append(fake.getTokenArgsForCall, struct {
	}{})
	stub := fake.GetTokenStub
	fakeReturns := fake.getTokenReturns
	fake.recordInvocation("GetToken", []interface{}{})
	fake.getTokenMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAuthenticator) GetTokenCallCount() int {
	fake.getTokenMutex.RLock()
	defer fake.getTokenMutex.RUnlock()
	return len(fake.getTokenArgsForCall)
}

func (fake *FakeAuthenticator) GetTokenCalls(stub func() (*auth.TokenResponse, *errors.ApiError)) {
	fake.getTokenMutex.Lock()
	defer fake.getTokenMutex.Unlock()
	fake.GetTokenStub = stub
}

func (fake *FakeAuthenticator) GetTokenReturns(result1 *auth.TokenResponse, result2 *errors.ApiError) {
	fake.getTokenMutex.Lock()
	defer fake.getTokenMutex.Unlock()
	fake.GetTokenStub = nil
	fake.getTokenReturns = struct {
		result1 *auth.TokenResponse
		result2 *errors.ApiError
	}{result1, result2}
}

func (fake *FakeAuthenticator) GetTokenReturnsOnCall(i int, result1 *auth.TokenResponse, result2 *errors.ApiError) {
	fake.getTokenMutex.Lock()
	defer fake.getTokenMutex.Unlock()
	fake.GetTokenStub = nil
	if fake.getTokenReturnsOnCall == nil {
		fake.getTokenReturnsOnCall = make(map[int]struct {
			result1 *auth.TokenResponse
			result2 *errors.ApiError
		})
	}
	fake.getTokenReturnsOnCall[i] = struct {
		result1 *auth.TokenResponse
		result2 *errors.ApiError
	}{result1, result2}
}

func (fake *FakeAuthenticator) GetTokenCacheOverride(arg1 string, arg2 bool) (*auth.TokenResponse, *errors.ApiError) {
	fake.getTokenCacheOverrideMutex.Lock()
	ret, specificReturn := fake.getTokenCacheOverrideReturnsOnCall[len(fake.getTokenCacheOverrideArgsForCall)]
	fake.getTokenCacheOverrideArgsForCall = append(fake.getTokenCacheOverrideArgsForCall, struct {
		arg1 string
		arg2 bool
	}{arg1, arg2})
	stub := fake.GetTokenCacheOverrideStub
	fakeReturns := fake.getTokenCacheOverrideReturns
	fake.recordInvocation("GetTokenCacheOverride", []interface{}{arg1, arg2})
	fake.getTokenCacheOverrideMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAuthenticator) GetTokenCacheOverrideCallCount() int {
	fake.getTokenCacheOverrideMutex.RLock()
	defer fake.getTokenCacheOverrideMutex.RUnlock()
	return len(fake.getTokenCacheOverrideArgsForCall)
}

func (fake *FakeAuthenticator) GetTokenCacheOverrideCalls(stub func(string, bool) (*auth.TokenResponse, *errors.ApiError)) {
	fake.getTokenCacheOverrideMutex.Lock()
	defer fake.getTokenCacheOverrideMutex.Unlock()
	fake.GetTokenCacheOverrideStub = stub
}

func (fake *FakeAuthenticator) GetTokenCacheOverrideArgsForCall(i int) (string, bool) {
	fake.getTokenCacheOverrideMutex.RLock()
	defer fake.getTokenCacheOverrideMutex.RUnlock()
	argsForCall := fake.getTokenCacheOverrideArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAuthenticator) GetTokenCacheOverrideReturns(result1 *auth.TokenResponse, result2 *errors.ApiError) {
	fake.getTokenCacheOverrideMutex.Lock()
	defer fake.getTokenCacheOverrideMutex.Unlock()
	fake.GetTokenCacheOverrideStub = nil
	fake.getTokenCacheOverrideReturns = struct {
		result1 *auth.TokenResponse
		result2 *errors.ApiError
	}{result1, result2}
}

func (fake *FakeAuthenticator) GetTokenCacheOverrideReturnsOnCall(i int, result1 *auth.TokenResponse, result2 *errors.ApiError) {
	fake.getTokenCacheOverrideMutex.Lock()
	defer fake.getTokenCacheOverrideMutex.Unlock()
	fake.GetTokenCacheOverrideStub = nil
	if fake.getTokenCacheOverrideReturnsOnCall == nil {
		fake.getTokenCacheOverrideReturnsOnCall = make(map[int]struct {
			result1 *auth.TokenResponse
			result2 *errors.ApiError
		})
	}
	fake.getTokenCacheOverrideReturnsOnCall[i] = struct {
		result1 *auth.TokenResponse
		result2 *errors.ApiError
	}{result1, result2}
}

func (fake *FakeAuthenticator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getTokenMutex.RLock()
	defer fake.getTokenMutex.RUnlock()
	fake.getTokenCacheOverrideMutex.RLock()
	defer fake.getTokenCacheOverrideMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAuthenticator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ auth.Authenticator = new(FakeAuthenticator)
